# Smart Contract CI/CD Pipeline
#
# This comprehensive GitHub Actions workflow automates the complete lifecycle of smart contract
# development, testing, security analysis, and deployment for a blockchain voting system.
#
# ## Workflow Overview
#
# The pipeline consists of multiple sequential and parallel jobs that ensure code quality,
# security, and reliability before deployment:
#
# ### 1. Build Job
# - Compiles smart contracts using Hardhat
# - Generates cryptographic hashes for build integrity verification
# - Caches compiled artifacts to optimize subsequent workflow runs
#
# ### 2. Test Job
# - Executes comprehensive contract tests with gas reporting
# - Generates detailed test coverage reports
# - Uploads coverage artifacts for analysis
#
# ### 3. Advanced Fuzzing Job
# - Performs sophisticated fuzz testing using Foundry
# - Includes planned integration with Ityfuzz for additional fuzzing scenarios
# - Generates comprehensive fuzzing reports for vulnerability assessment
#
# ### 4. Formal Verification Job
# - Utilizes Certora Prover for mathematical verification of contract properties
# - Verifies contracts against formal specifications
# - Provides mathematical guarantees about contract behavior
#
# ### 5. Security Analysis Job
# - Runs Slither for static analysis and vulnerability detection
# - Executes Mythril for symbolic execution and security scanning
# - Includes placeholder for future CertiK AI integration
#
# ### 6. Deployment Jobs
# - **Testnet Deployment**: Deploys to Sepolia testnet from 'dev' branch
# - **Mainnet Deployment**: Production deployment from 'main' branch (currently commented)
#   - Includes quantum-resistant cryptographic signatures
#   - Contract verification on Etherscan
#   - Extended artifact retention for audit compliance
#
# ## Trigger Conditions
#
# The workflow is triggered by:
# - Push events to 'main' or 'dev' branches
# - Pull requests targeting 'main' or 'dev' branches
# - Only when changes occur in: contracts/, test/, or scripts/ directories
#
# ## Security Features
#
# - Multi-tool security analysis (Slither, Mythril)
# - Formal verification using mathematical proofs
# - Quantum-resistant signatures for production deployments
# - Blockchain registry integration for deployment audit trails
# - Environment-specific secret management
#
# ## Artifacts and Reporting
#
# The workflow generates and preserves:
# - Test coverage reports (14-day retention)
# - Fuzzing analysis reports (14-day retention)
# - Testnet deployment artifacts (30-day retention)
# - Mainnet deployment artifacts (90-day retention)
#
# ## Dependencies and Requirements
#
# Required secrets:
# - STAGING_PRIVATE_KEY: Testnet deployment key
# - PRODUCTION_PRIVATE_KEY: Mainnet deployment key (for production)
# - INFURA_API_KEY: Blockchain network access
# - CERTORA_API_KEY: Formal verification service
# - ETHERSCAN_API_KEY: Contract verification service
# - QUANTUM_KEY_ID: Quantum-resistant signing key
# - REGISTRY_CONTRACT_ADDRESS: Deployment registry contract
#
# This pipeline ensures that only thoroughly tested, verified, and secure smart contracts
# are deployed to production environments while maintaining a complete audit trail
# of all development and deployment activities.
name: Smart Contract CI/CD

# This workflow is triggered on push or pull request events to the 'main' or 'dev' branches.
# It only runs when changes are made to files within the 'contracts', 'test', or 'scripts' directories.
on:
  push:
    branches: [main, dev]
    paths:
      - "contracts/**"
      - "test/**"
      - "scripts/**"
  pull_request:
    branches: [main, dev]
    paths:
      - "contracts/**"
      - "test/**"
      - "scripts/**"

jobs:
  # This GitHub Actions workflow automates the build process for smart contracts.
  #
  # Steps:
  # 1. Checks out the repository code with full history.
  # 2. Sets up Node.js version 22 and enables npm caching for faster installs.
  # 3. Installs project dependencies using a clean install (`npm ci`).
  # 4. Compiles smart contracts using Hardhat.
  # 5. Generates a SHA-256 hash of all compiled contract artifacts for build integrity.
  # 6. Caches the compiled contract artifacts to speed up subsequent workflow runs.
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./contracts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Compile smart contracts
        run: npx hardhat compile

      - name: Generate build hash
        id: hash
        run: |
          find artifacts/contracts -type f -name "*.json" | sort | xargs sha256sum > contract-hashes.txt
          HASH=$(sha256sum contract-hashes.txt | cut -d ' ' -f 1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Cache compiled contracts
        uses: actions/cache@v4.2.3
        with:
          path: contracts/artifacts/
          key: ${{ runner.os }}-artifacts-${{ github.sha }}

  # This workflow runs tests and generates a coverage report for smart contracts.
  #
  # Steps:
  # 1. Checks out the repository code.
  # 2. Sets up Node.js version 22 with npm caching.
  # 3. Installs project dependencies using `npm ci`.
  # 4. Restores compiled contract artifacts from cache to speed up the workflow.
  # 5. Runs Hardhat contract tests with gas reporting enabled.
  # 6. Generates a test coverage report using Hardhat.
  # 7. Uploads the generated coverage report as a workflow artifact for later inspection.
  test:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./contracts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Restore compiled contracts
        uses: actions/cache@v4.2.3
        with:
          path: contracts/artifacts/
          key: ${{ runner.os }}-artifacts-${{ github.sha }}

      - name: Run contract tests
        run: npx hardhat test
        env:
          REPORT_GAS: true

      - name: Generate test coverage report
        run: npx hardhat coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4.6.2
        with:
          name: coverage-report
          path: contracts/coverage/
          retention-days: 14

  #
  # This workflow performs advanced fuzz testing on smart contracts.
  #
  # Jobs:
  #   - advanced-fuzzing:
  #       * Runs after the 'test' job completes.
  #       * Executes on the latest Ubuntu runner.
  #       * Operates within the ./contracts directory.
  #       * Steps:
  #           - Checks out the repository code.
  #           - Sets up Node.js (version 22) with npm caching.
  #           - Installs project dependencies using npm ci.
  #           - Installs the Foundry toolchain (nightly version).
  #           - Runs Foundry's fuzzing tool (`forge fuzz`) with FFI enabled.
  #           - Installs and runs Ityfuzz for additional fuzzing, including flashloan and max-depth options.
  #           - Generates a markdown report combining results from Foundry and Ityfuzz.
  #           - Uploads the generated fuzzing report as a workflow artifact, retained for 14 days.
  #
  # Purpose:
  #   - To automate comprehensive fuzz testing of smart contracts using multiple tools.
  #   - To aggregate and preserve fuzzing results for further analysis and auditing.
  advanced-fuzzing:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./contracts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@v1.4.0
        with:
          version: nightly

      - name: Run Foundry Fuzzing
        run: forge fuzz --contracts . --ffi

      #- name: Run Ityfuzz
      #  run: |
      #    npm install -g ityfuzz
      #    ityfuzz evm --flashloan --max-depth 12 --contract contracts/

      - name: Generate fuzzing report
        run: |
          echo "# Fuzzing Report" > fuzzing-report.md
          echo "## Foundry Results" >> fuzzing-report.md
          if [ -f foundry-fuzzing.log ]; then
            cat foundry-fuzzing.log >> fuzzing-report.md
          else
            echo "No Foundry results found" >> fuzzing-report.md
          fi

      - name: Upload fuzzing report
        uses: actions/upload-artifact@v4.6.2
        with:
          name: fuzzing-report
          path: contracts/fuzzing-report.md
          retention-days: 14

  # Formal Verification Job
  #
  # This job performs formal verification of smart contracts using Certora Prover.
  # It runs after the test job completes successfully and verifies the VotingContract
  # against specified formal specifications.
  #
  # Dependencies:
  #   - Requires 'test' job to complete successfully
  #   - Needs CERTORA_API_KEY secret configured in repository
  #   - Needs GITHUB_TOKEN for status updates
  #
  # Permissions:
  #   - contents: read - Access repository content
  #   - statuses: write - Update commit status checks
  #   - pull-requests: write - Comment on pull requests with results
  #
  # Verification Process:
  #   1. Checks out the repository code
  #   2. Sets up Node.js environment with npm caching
  #   3. Installs project dependencies
  #   4. Submits verification job to Certora Prover for VotingContract
  #      - Verifies against voting_rules.spec specification
  #      - Uses Solidity compiler version 0.8.30
  #      - Continues workflow even if verification fails
  #
  # Working Directory: ./contracts
  # Runner: ubuntu-latest
  formal-verification:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      statuses: write
      pull-requests: write
    defaults:
      run:
        working-directory: ./contracts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Submit Verification jobs to Certora Prover
        uses: Certora/certora-run-action@v1.3.0
        continue-on-error: true
        with:
          configurations: |-
            VotingContract.sol:VotingContract --verify VotingContract:specs/voting_rules.spec
          solc-versions: 0.8.30
          job-name: "Voting Contract Verification"
          certora-key: ${{ secrets.CERTORA_API_KEY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Security Analysis Job
  #
  # This job performs comprehensive security analysis on Solidity smart contracts
  # using multiple static analysis tools. It runs after the test job completes
  # successfully and includes the following security scans:
  #
  # Dependencies:
  # - Requires 'test' job to complete successfully
  # - Runs on Ubuntu latest environment
  # - Working directory set to ./contracts
  #
  # Security Tools:
  # 1. Slither Analysis:
  #    - Uses Crytic's Slither action for static analysis
  #    - Filters out node_modules to avoid false positives
  #    - Excludes naming-convention and external-function checks
  #    - Targets all contracts in the contracts/ directory
  #
  # 2. Mythril Analysis:
  #    - Installs Mythril via pip3
  #    - Analyzes all .sol files in contracts directory
  #    - Uses Solidity compiler version 0.8.30
  #
  # Setup Requirements:
  # - Node.js 22 with npm caching for dependency management
  # - Python 3.9 for Mythril installation and execution
  #
  # Future Enhancements:
  # - CertiK AI scanner integration is planned (currently commented out)
  #
  # This job helps identify potential security vulnerabilities, code quality issues,
  # and compliance with best practices before deployment.
  security:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./contracts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.9"

      - name: Run Slither Security Analysis
        uses: crytic/slither-action@v0.4.1
        with:
          target: contracts/
          slither-args: '--filter-path "node_modules/*" --exclude naming-convention,external-function'

      - name: Run Mythril Security Analysis
        run: |
          pip3 install mythril
          myth analyze contracts/*.sol --solc solc-0.8.30

    # - name: Run CertiK AI scan
    #   run: |
    #     # CertiK AI scanner integration - to be implemented
    #     echo "CertiK AI scan placeholder"

  # Deploy to Testnet Job
  #
  # This job deploys smart contracts to the Sepolia testnet environment.
  # It runs only on the 'dev' branch and requires all testing and verification
  # jobs to complete successfully before execution.
  #
  # Prerequisites:
  # - test job must pass
  # - security job must pass
  # - advanced-fuzzing job must pass
  # - formal-verification job must pass
  #
  # Environment: staging
  # Working Directory: ./contracts
  #
  # Steps:
  # 1. Checkout repository code
  # 2. Setup Node.js v22 with npm caching
  # 3. Install project dependencies
  # 4. Deploy contracts to Sepolia testnet using Hardhat
  # 5. Save deployment information to artifacts
  # 6. Register deployment on blockchain registry
  # 7. Upload deployment artifacts for 30-day retention
  #
  # Required Secrets:
  # - STAGING_PRIVATE_KEY: Private key for testnet deployment
  # - INFURA_API_KEY: Infura API key for blockchain access
  # - REGISTRY_CONTRACT_ADDRESS: Address of the deployment registry contract
  #
  # Outputs:
  # - testnet-deployment artifact containing deployment information
  # - Blockchain registry entry for deployed contracts
  deploy-testnet:
    if: github.ref == 'refs/heads/dev'
    needs: [test, security, advanced-fuzzing, formal-verification]
    runs-on: ubuntu-latest
    environment: staging
    defaults:
      run:
        working-directory: ./contracts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Testnet
        run: npx hardhat run scripts/deploy.js --network sepolia
        env:
          PRIVATE_KEY: ${{ secrets.STAGING_PRIVATE_KEY }}
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}

      - name: Save deployment info
        run: |
          mkdir -p deployment
          if [ -f artifacts/deployment.json ]; then
            cp artifacts/deployment.json deployment/testnet-deployment.json
          else
            echo "Warning: deployment.json not found"
          fi

      - name: Register deployment on blockchain
        uses: ./.github/actions/blockchain-verification
        with:
          artifacts-path: artifacts
          network: sepolia
          registry-contract: ${{ secrets.REGISTRY_CONTRACT_ADDRESS }}
          operation: "deploy"
          environment: "testnet"

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: testnet-deployment
          path: contracts/deployment/
          retention-days: 30

  # Deploy to Mainnet Job
  #
  # This job deploys smart contracts to the Ethereum mainnet production environment.
  # It runs only on the 'main' branch and requires all testing, security, and verification
  # jobs to complete successfully before execution.
  #
  # Prerequisites:
  # - test job must pass
  # - security job must pass
  # - advanced-fuzzing job must pass
  # - formal-verification job must pass
  #
  # Environment: production
  # Working Directory: ./contracts
  #
  # Steps:
  # 1. Checkout repository code
  # 2. Setup Node.js v22 with npm caching
  # 3. Install project dependencies
  # 4. Sign deployment artifacts using quantum-resistant cryptography (Dilithium5)
  # 5. Deploy contracts to Ethereum mainnet using Hardhat
  # 6. Verify deployed contracts on Etherscan
  # 7. Save deployment information to artifacts
  # 8. Register deployment on blockchain registry
  # 9. Upload deployment artifacts for 90-day retention
  #
  # Required Secrets:
  # - PRODUCTION_PRIVATE_KEY: Private key for mainnet deployment
  # - INFURA_API_KEY: Infura API key for blockchain access
  # - QUANTUM_KEY_ID: Quantum-resistant signing key identifier
  # - ETHERSCAN_API_KEY: Etherscan API key for contract verification
  # - REGISTRY_CONTRACT_ADDRESS: Address of the deployment registry contract
  #
  # Security Features:
  # - Quantum-resistant signature using Dilithium5 algorithm
  # - Production environment protection
  # - Extended artifact retention (90 days)
  # - Blockchain registry integration for audit trail
  #
  # Outputs:
  # - mainnet-deployment artifact containing deployment information
  # - Verified contracts on Etherscan
  # - Blockchain registry entry for deployed contracts
  #deploy-mainnet:
  #  if: github.ref == 'refs/heads/main'
  #  needs: [test, security, advanced-fuzzing, formal-verification]
  #  runs-on: ubuntu-latest
  #  environment: production
  #  defaults:
  #    run:
  #      working-directory: ./contracts
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4.2.2
  #
  #    - name: Setup Node.js
  #      uses: actions/setup-node@v4.4.0
  #      with:
  #        node-version: "22"
  #        cache: "npm"
  #
  #    - name: Install dependencies
  #      run: npm ci
  #
  #    - name: Sign deployment with quantum-resistant signature
  #      uses: ./.github/actions/pqc-sign
  #      with:
  #        artifacts-path: artifacts
  #        key-id: ${{ secrets.QUANTUM_KEY_ID }}
  #        algorithm: "dilithium5"
  #
  #    - name: Deploy to Mainnet
  #      run: npx hardhat run scripts/deploy.js --network mainnet
  #      env:
  #       PRIVATE_KEY: ${{ secrets.PRODUCTION_PRIVATE_KEY }}
  #       INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
  #
  #    - name: Verify contracts
  #      run: npx hardhat verify --network mainnet --constructor-args scripts/constructor-args.js $(cat artifacts/deployment.json | jq -r '.contracts["VotingContract.sol:VotingContract"].address')
  #      env:
  #        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
  #
  #    - name: Save deployment info
  #      run: |
  #        mkdir -p deployment
  #        if [ -f artifacts/deployment.json ]; then
  #          cp artifacts/deployment.json deployment/mainnet-deployment.json
  #        else
  #          echo "Warning: deployment.json not found"
  #        fi
  #
  #    - name: Register deployment on blockchain
  #      uses: ./.github/actions/blockchain-verification
  #      with:
  #        artifacts-path: artifacts
  #        network: mainnet
  #        registry-contract: ${{ secrets.REGISTRY_CONTRACT_ADDRESS }}
  #        operation: "deploy"
  #        environment: "production"
  #
  #    - name: Upload deployment artifacts
  #      uses: actions/upload-artifact@v4.6.2
  #      with:
  #        name: mainnet-deployment
  #        path: contracts/deployment/
  #        retention-days: 90
