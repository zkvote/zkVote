# ------------------------------------------------------------------------------------
# Full System Deployment Workflow for zkVote
#
# Overview:
#   This GitHub Actions workflow orchestrates the full deployment pipeline for the zkVote system,
#   supporting granular deployment of contracts, frontend, and backend components to either
#   staging or production environments. It integrates quantum-resistant cryptography for artifact
#   signing, blockchain-based deployment verification, and automated post-deployment checks.
#
# Trigger:
#   - Manually via the GitHub Actions UI using workflow_dispatch.
#
# Inputs:
#   - environment:
#       Description: Specifies the deployment environment.
#       Required: Yes
#       Default: "staging"
#       Type: Choice (Options: "staging", "production")
#   - components:
#       Description: Specifies which components to deploy.
#       Required: Yes
#       Default: "all"
#       Type: Choice (Options: "all", "contracts", "frontend", "backend")
#
# Jobs:
#   1. prepare:
#       - Determines which components to deploy based on workflow inputs.
#       - Validates the target deployment environment.
#       - Sets output flags for downstream jobs.
#
#   2. deploy_contracts:
#       - Deploys smart contracts using Hardhat.
#       - Signs artifacts with quantum-resistant signatures in production.
#       - Registers deployments on-chain.
#       - Uploads deployment artifacts for traceability.
#       - Runs only if contracts are selected for deployment.
#
#   3. deploy-frontend:
#       - Deploys the frontend application.
#       - Downloads contract artifacts if contracts were deployed.
#       - Builds and signs the frontend (production only).
#       - Registers deployment on-chain.
#       - (Optional) Deploys to Firebase Hosting.
#       - Runs only if frontend is selected for deployment.
#
#   4. deploy-backend:
#       - Builds and pushes backend Docker images.
#       - Signs backend build artifacts in production.
#       - Registers image on-chain.
#       - Deploys to Kubernetes using DigitalOcean.
#       - Runs only if backend is selected for deployment.
#
#   5. post-deployment-checks:
#       - Runs smoke tests and contract verification.
#       - Verifies blockchain attestations.
#       - Checks health of API and frontend endpoints.
#       - Notifies Slack channel on successful deployment.
#
# Secrets Required:
#   - QUANTUM_KEY_ID: For quantum-resistant signing.
#   - DEPLOY_PRIVATE_KEY: For contract deployment.
#   - INFURA_API_KEY: For Ethereum node access.
#   - REGISTRY_CONTRACT_ADDRESS: For on-chain registration.
#   - DIGITALOCEAN_TOKEN: For Kubernetes management.
#   - DEPLOYMENT_SLACK_WEBHOOK_URL: For Slack notifications.
#   - (Optional) FIREBASE_SERVICE_ACCOUNT, FIREBASE_SERVICE_ACCOUNT_PROD: For frontend deployment.
#
# Notes:
#   - All jobs dynamically select environment and network based on workflow inputs.
#   - Quantum-resistant cryptography is integrated for artifact signing in production.
#   - Blockchain verification ensures transparency and traceability of deployments.
#   - Artifacts are retained for 90 days for auditability.
#   - Slack notifications are sent only on successful deployments.
# ------------------------------------------------------------------------------------
name: Full System Deployment
# This workflow is triggered manually via the GitHub Actions UI using workflow_dispatch.
#
# Inputs:
#   environment:
#     - Description: Specifies the deployment environment.
#     - Required: Yes
#     - Default: "staging"
#     - Type: Choice (Options: "staging", "production")
#   components:
#     - Description: Specifies which components to deploy.
#     - Required: Yes
#     - Default: "all"
#     - Type: Choice (Options: "all", "contracts", "frontend", "backend")
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      components:
        description: "Components to deploy"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - contracts
          - frontend
          - backend
jobs:
  # This job, "prepare", determines which components (contracts, frontend, backend) should be deployed
  # based on workflow inputs, and validates the target deployment environment.
  #
  # Outputs:
  #   - deploy_contracts: "true" if contracts should be deployed, "false" otherwise.
  #   - deploy_frontend: "true" if frontend should be deployed, "false" otherwise.
  #   - deploy_backend: "true" if backend should be deployed, "false" otherwise.
  #   - environment: The deployment environment specified by the workflow input.
  #
  # Steps:
  #   1. "Check components to deploy": Sets output flags for each component based on the "components" input.
  #      Accepts "all", "contracts", "frontend", or "backend" as valid values.
  #   2. "Validate environment": Ensures the "environment" input is either "staging" or "production".
  #      Fails the job if an invalid environment is specified.
  prepare:
    runs-on: ubuntu-latest
    outputs:
      deploy_contracts: ${{ steps.check-components.outputs.deploy_contracts }}
      deploy_frontend: ${{ steps.check-components.outputs.deploy_frontend }}
      deploy_backend: ${{ steps.check-components.outputs.deploy_backend }}
      environment: ${{ github.events.inputs.environment }}
    steps:
      - name: Check components to deploy
        id: check-components
        run: |
          if [[ "${{ github.event.inputs.components }}" == "all" || "${{ github.event.inputs.components }}" == "contracts" ]]; then
            echo "deploy_contracts=true" >> $GITHUB_OUTPUT
          else
            echo "deploy_contracts=false" >> $GITHUB_OUTPUT
          fi

          if [[ "${{ github.event.inputs.components }}" == "all" || "${{ github.event.inputs.components }}" == "frontend" ]]; then
            echo "deploy_frontend=true" >> $GITHUB_OUTPUT
          else
            echo "deploy_frontend=false" >> $GITHUB_OUTPUT
          fi

          if [[ "${{ github.event.inputs.components }}" == "all" || "${{ github.event.inputs.components }}" == "backend" ]]; then
            echo "deploy_backend=true" >> $GITHUB_OUTPUT
          else
            echo "deploy_backend=false" >> $GITHUB_OUTPUT
          fi
      - name: Validate environment
        run: |
          if [[ "${{ github.event.inputs.environment }}" != "staging" && "${{ github.event.inputs.environment }}" != "production" ]]; then
            echo "Invalid environment specified: ${{ github.event.inputs.environment }}"
            exit 1
          fi

  #
  # GitHub Actions Workflow: deploy_contracts
  #
  # This job automates the deployment of smart contracts as part of the CI/CD pipeline.
  #
  # Steps:
  # 1. Checks out the repository code.
  # 2. Sets up Node.js (version 22) with npm caching for faster installs.
  # 3. Installs contract dependencies using npm ci in the ./contracts directory.
  # 4. Compiles smart contracts using Hardhat.
  # 5. (Production only) Signs compiled artifacts with a quantum-resistant signature (Dilithium5) for enhanced security.
  # 6. Deploys contracts to the appropriate network:
  #    - 'mainnet' if the environment is production.
  #    - 'sepolia' otherwise.
  #    Uses secrets for deployment credentials.
  # 7. Registers the deployment on the blockchain using a custom verification action, specifying the network and registry contract.
  # 8. Uploads deployment artifacts for archival and traceability, retaining them for 90 days.
  #
  # Conditional Execution:
  # - Runs only if the 'prepare' job outputs 'deploy_contracts' as 'true'.
  # - The environment and network are dynamically selected based on the 'prepare' job outputs.
  #
  # Secrets Used:
  # - QUANTUM_KEY_ID: Key ID for quantum-resistant signing (production only).
  # - DEPLOY_PRIVATE_KEY: Private key for contract deployment.
  # - INFURA_API_KEY: API key for Ethereum node access.
  # - REGISTRY_CONTRACT_ADDRESS: Address of the registry contract for deployment registration.
  #
  deploy_contracts:
    needs: prepare
    if: needs.prepare.outputs.deploy_contracts == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        working-directory: ./contracts
        run: npm ci

      - name: Compile contracts
        working-directory: ./contracts
        run: npx hardhat compile

      - name: Sign artifacts with quantum-resistant signature
        if: needs.prepare.outputs.environment == 'production'
        uses: ./.github/actions/pqc-sign
        with:
          artifacts-path: ./contracts/artifacts
          key-id: ${{ secrets.QUANTUM_KEY_ID }}
          algorithm: "dilithium5"

      - name: Deploy contracts
        working-directory: ./contracts
        run: |
          if [[ "${{ needs.prepare.outputs.environment }}" == "production" ]]; then
            npx hardhat run scripts/deploy.js --network mainnet
          else
            npx hardhat run scripts/deploy.js --network sepolia
          fi
        env:
          PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}

      - name: Register deployment on blockchain
        uses: ./.github/actions/blockchain-verification
        with:
          artifacts-path: ./contracts/artifacts
          network: ${{ needs.prepare.outputs.environment == 'production' && 'mainnet' || 'sepolia' }}
          registry-contract: ${{ secrets.REGISTRY_CONTRACT_ADDRESS }}
          operation: "deploy"
          environment: ${{ needs.prepare.outputs.environment }}

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: contract-deployment
          path: contracts/deployments/
          retention-days: 90

  #
  # deploy-frontend job
  #
  # This job handles the deployment of the frontend application as part of the CI/CD pipeline.
  #
  # Workflow:
  # - Runs after 'prepare' and 'deploy_contracts' jobs.
  # - Conditional execution based on outputs from the 'prepare' job:
  #     - Only runs if 'deploy_frontend' is true.
  #     - Ensures either contracts do not need deployment or previous jobs succeeded.
  # - Runs on Ubuntu latest environment.
  # - Dynamically sets the deployment environment from 'prepare' job output.
  #
  # Steps:
  # 1. Checks out the repository code.
  # 2. Sets up Node.js (version 22) with npm caching for dependencies.
  # 3. Downloads contract deployment artifacts if contracts were deployed.
  # 4. Installs frontend dependencies using npm ci.
  # 5. Generates contract types if contracts were deployed.
  # 6. Copies generated contract types to the frontend source directory.
  # 7. Builds the frontend:
  #     - Runs production or staging build based on the environment.
  # 8. Signs the build artifacts with a quantum-resistant signature (Dilithium5) if in production.
  # 9. Registers the deployment on the blockchain, specifying the network and registry contract.
  # 10. (Commented out) Deploys the frontend to Firebase Hosting, with dynamic configuration for environment, project, and channel.
  #
  # Secrets and Outputs:
  # - Uses secrets for quantum key, registry contract address, and Firebase service accounts.
  # - Relies on outputs from the 'prepare' job to determine environment and deployment conditions.
  #
  deploy-frontend:
    needs: [prepare, deploy_contracts]
    if: |
      needs.prepare.outputs.deploy_frontend == 'true' &&
      (needs.prepare.outputs.deploy_contracts == 'false' || success())
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: |
            ui/voter_app/package-lock.json
            sdk/package-lock.

      - name: Download contract deployments
        if: needs.prepare.outputs.deploy_contracts == 'true'
        uses: actions/download-artifact@v4.3.0
        with:
          name: contract-deployment
          path: contracts/deployments/

      - name: Install dependencies
        working-directory: ./ui/voter_app
        run: npm ci

      - name: Generate contract types
        if: needs.prepare.outputs.deploy_contracts == 'true'
        working-directory: ./contracts
        run: |
          npm ci
          npm run generate-types

      - name: Copy contract types to frontend
        if: needs.prepare.outputs.deploy_contracts == 'true'
        run: |
          mkdir -p ui/voter_app/src/types/contracts
          cp -r contracts/typechain-types/* ui/voter_app/src/types/contracts/

      - name: Build frontend
        working-directory: ./ui/voter_app
        run: |
          if [[ "${{ needs.prepare.outputs.environment }}" == "production" ]]; then
            npm run build:prod
          else
            npm run build:staging
          fi

      - name: Sign with quantum-resistant signature
        if: needs.prepare.outputs.environment == 'production'
        uses: ./.github/actions/pqc-sign
        with:
          artifacts-path: ./ui/voter_app/dist
          key-id: ${{ secrets.QUANTUM_KEY_ID }}
          algorithm: "dilithium5"

      - name: Register deployment on blockchain
        uses: ./.github/actions/blockchain-verification
        with:
          artifacts-path: ./ui/voter_app/dist
          network: ${{ needs.prepare.outputs.environment == 'production' && 'mainnet' || 'sepolia' }}
          registry-contract: ${{ secrets.REGISTRY_CONTRACT_ADDRESS }}
          operation: "deploy"
          environment: ${{ needs.prepare.outputs.environment }}

      # - name: Deploy frontend
      #   uses: FirebaseExtended/action-hosting-deploy@v0
      #   with:
      #     repoToken: "${{ secrets.GITHUB_TOKEN }}"
      #     firebaseServiceAccount: '${{ needs.prepare.outputs.environment == "production" && secrets.FIREBASE_SERVICE_ACCOUNT_PROD || secrets.FIREBASE_SERVICE_ACCOUNT }}'
      #     projectId: ${{ needs.prepare.outputs.environment == 'production' && 'zkvote-prod' || 'zkvote-dev' }}
      #     channelId: ${{ needs.prepare.outputs.environment == 'production' && 'live' || 'staging' }}
      #     entryPoint: ./ui/voter_app

  # ------------------------------------------------------------------------------------
  # deploy-backend: Deploys the backend service to the appropriate environment.
  #
  # Dependencies:
  #   - Needs the 'prepare' and 'deploy_contracts' jobs to complete.
  #   - Runs only if 'deploy_backend' output from 'prepare' is 'true' and either
  #     'deploy_contracts' is 'false' or the workflow is successful.
  #
  # Steps:
  #   1. Checks out the repository code.
  #   2. Sets up Docker Buildx for multi-platform builds.
  #   3. Downloads contract deployment artifacts if contracts were deployed.
  #   4. Configures contract addresses for the backend based on environment.
  #   5. Logs in to GitHub Container Registry (ghcr.io).
  #   6. (Production only) Signs backend build artifacts with a quantum-resistant signature.
  #   7. Builds and pushes the backend Docker image with environment-specific tags and build args.
  #   8. Registers the built image on the blockchain for verification.
  #   9. Installs DigitalOcean CLI (doctl) for Kubernetes management.
  #  10. Dumps the Kubernetes kubeconfig for the target environment.
  #  11. Applies Kubernetes manifests to deploy and restart the backend, ensuring rollout success.
  #
  # Environment Variables & Secrets:
  #   - Uses outputs from the 'prepare' job for environment selection and deployment logic.
  #   - Requires secrets: GITHUB_TOKEN, QUANTUM_KEY_ID, REGISTRY_CONTRACT_ADDRESS, DIGITALOCEAN_TOKEN.
  #
  # Notes:
  #   - Supports both staging (sepolia) and production (mainnet) environments.
  #   - Integrates quantum-resistant cryptography for production deployments.
  #   - Registers deployments on-chain for transparency and verification.
  # ------------------------------------------------------------------------------------
  deploy-backend:
    needs: [prepare, deploy_contracts]
    if: |
      needs.prepare.outputs.deploy_backend == 'true' &&
      (needs.prepare.outputs.deploy_contracts == 'false' || success())
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Download contract deployments
        if: needs.prepare.outputs.deploy_contracts == 'true'
        uses: actions/download-artifact@v4.3.0
        with:
          name: contract-deployment
          path: contracts/deployments/

      - name: Configure contract addresses
        if: needs.prepare.outputs.deploy_contracts == 'true'
        run: |
          mkdir -p backend/config/${{ needs.prepare.outputs.environment }}
          if [[ "${{ needs.prepare.outputs.environment }}" == "production" ]]; then
            cat contracts/deployments/mainnet/addresses.json > backend/config/production/contracts.json
          else
            cat contracts/deployments/sepolia/addresses.json > backend/config/staging/contracts.json
          fi

      - name: Login to Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign with quantum-resistant signature
        if: needs.prepare.outputs.environment == 'production'
        run: |
          # Build a local copy to sign
          cd backend
          npm ci
          npm run build
          cd ..
          # Sign the build artifacts
          ./.github/actions/pqc-sign ./backend/dist ${{ secrets.QUANTUM_KEY_ID }} dilithium5

      - name: Build Docker image
        uses: docker/build-push-action@v6.18.0
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/backend:${{ needs.prepare.outputs.environment }}
            ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
          build-args: |
            ENVIRONMENT=${{ needs.prepare.outputs.environment }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            QUANTUM_READY=true
            PQC_SIGNATURE=${{ needs.prepare.outputs.environment == 'production' && 'true' || 'false' }}

      - name: Register image on blockchain
        uses: ./.github/actions/blockchain-verification
        with:
          artifacts-path: ./backend/dist
          network: ${{ needs.prepare.outputs.environment == 'production' && 'mainnet' || 'sepolia' }}
          registry-contract: ${{ secrets.REGISTRY_CONTRACT_ADDRESS }}
          operation: "deploy"
          environment: ${{ needs.prepare.outputs.environment }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2.5.1
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Dump Kubernetes kubeconfig
        run: |
          doctl kubernetes cluster kubeconfig show zkvote-${{ needs.prepare.outputs.environment }} \
          > $GITHUB_WORKSPACE/kubeconfig.yml

      - name: Apply Kubernetes manifests
        run: |
          export KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig.yml
          kubectl apply -f k8s/${{ needs.prepare.outputs.environment }}/backend-deployment.yml
          kubectl rollout restart deployment/zkvote-backend -n zkvote-${{ needs.prepare.outputs.environment }}
          kubectl rollout status deployment/zkvote-backend -n zkvote-${{ needs.prepare.outputs.environment }}

  #
  # post-deployment-checks job
  #
  # This job performs a series of checks and notifications after deployment steps have completed.
  #
  # Dependencies:
  #   - Runs after: prepare, deploy_contracts, deploy-frontend, deploy-backend jobs.
  #   - Executes regardless of previous job outcomes, but only proceeds if all required deployments succeeded or were skipped.
  #
  # Steps:
  #   1. Checks out the repository code.
  #   2. Sets up Node.js (version 22) with npm caching.
  #   3. Installs end-to-end (e2e) test dependencies.
  #   4. Runs smoke tests against the deployed environment.
  #   5. If contracts were deployed, verifies smart contract deployments using Hardhat.
  #   6. Verifies blockchain attestations using a custom Node.js script.
  #   7. Checks the health of API and frontend endpoints for the target environment (production or staging).
  #   8. Notifies a Slack channel of successful deployment, including environment and component details.
  #
  # Environment Variables:
  #   - Uses outputs from the 'prepare' job to determine environment and which components were deployed.
  #   - Uses secrets for Slack webhook integration.
  #
  # Failure Handling:
  #   - Fails if any health check or verification step fails.
  #   - Slack notification is only sent on successful completion of all checks.
  #
  post-deployment-checks:
    needs: [prepare, deploy_contracts, deploy-frontend, deploy-backend]
    if: |
      always() &&
      (needs.prepare.outputs.deploy_contracts == 'false' || needs.deploy_contracts.result == 'success') &&
      (needs.prepare.outputs.deploy_frontend == 'false' || needs.deploy-frontend.result == 'success') &&
      (needs.prepare.outputs.deploy_backend == 'false' || needs.deploy-backend.result == 'success')
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: "22"
          cache: "npm"

      - name: Install test dependencies
        run: npm ci
        working-directory: ./e2e

      - name: Run smoke tests
        run: npm run test:smoke -- --env=${{ needs.prepare.outputs.environment }}
        working-directory: ./e2e

      - name: Run contract verification
        if: needs.prepare.outputs.deploy_contracts == 'true'
        run: |
          cd contracts
          npm ci
          if [[ "${{ needs.prepare.outputs.environment }}" == "production" ]]; then
            npx hardhat verify-deployment --network mainnet
          else
            npx hardhat verify-deployment --network sepolia
          fi

      - name: Verify blockchain attestations
        run: |
          cd tools
          npm ci
          node verify-blockchain-attestations.js --env ${{ needs.prepare.outputs.environment }}

      - name: Check endpoints
        run: |
          if [[ "${{ needs.prepare.outputs.environment }}" == "production" ]]; then
            BASE_URL="https://api.zkvote.io"
          else
            BASE_URL="https://api.staging.zkvote.io"
          fi

          # Check API health
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/health)
          if [[ $HEALTH_STATUS != 200 ]]; then
            echo "API health check failed with status $HEALTH_STATUS"
            exit 1
          fi

          # Check frontend
          if [[ "${{ needs.prepare.outputs.environment }}" == "production" ]]; then
            FRONTEND_URL="https://zkvote.io"
          else
            FRONTEND_URL="https://staging.zkvote.io"
          fi

          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $FRONTEND_URL)
          if [[ $FRONTEND_STATUS != 200 ]]; then
            echo "Frontend check failed with status $FRONTEND_STATUS"
            exit 1
          fi

      - name: Notify successful deployment
        uses: slackapi/slack-github-action@v2.1.0
        with:
          payload: |
            {
              "text": "🚀 zkVote deployed successfully to ${{ needs.prepare.outputs.environment }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚀 *zkVote deployment successful*\n*Environment:* ${{ needs.prepare.outputs.environment }}\n*Components:* ${{ github.event.inputs.components }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Deployed by ${{ github.actor }} at ${{ needs.prepare.outputs.environment == 'production' && needs.prepare.outputs.environment == 'production' && '2025-05-17 16:45:38' || '2025-05-17 16:45:38' }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.DEPLOYMENT_SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
