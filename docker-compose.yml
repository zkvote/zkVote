services:
  # Service: frontend
  # -----------------
  # This service builds the frontend application from the Dockerfile located in ./ui/voter_app.
  #
  # Build Arguments:
  #   - PQC_SIGNATURE_VERIFY: Enables or disables post-quantum cryptography signature verification (default: false).
  #
  # Ports:
  #   - Exposes port 80 inside the container and maps it to port 3000 on the host.
  #
  # Dependencies:
  #   - Depends on the backend service to be healthy before starting.
  #
  # Networks:
  #   - Connects to frontend-network for communication with other services.
  #
  # Restart Policy:
  #   - Restarts the container unless it is explicitly stopped.
  #
  # Healthcheck:
  #   - Periodically checks the root endpoint to ensure the service is running.
  #   - Interval: 30 seconds
  #   - Timeout: 5 seconds
  #   - Retries: 3
  #   - Start period: 10 seconds
  frontend:
    build:
      context: ./ui/voter_app
      dockerfile: Dockerfile
      args:
        - PQC_SIGNATURE_VERIFY=false
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - frontend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Service: backend
  # -----------------
  # This service builds the backend application from the Dockerfile located in ./backend.
  #
  # Build Arguments:
  #   - PQC_SIGNATURE_VERIFY: Enables or disables post-quantum cryptography signature verification (default: false).
  #
  # Ports:
  #   - Exposes port 3000 inside the container and maps it to port 3001 on the host.
  #
  # Dependencies:
  #   - Depends on postgres, redis, and ganache services to be healthy before starting.
  #
  # Networks:
  #   - Connects to both frontend-network and backend-network for communication with other services.
  #
  # Environment Variables:
  #   - NODE_ENV: Sets the environment to development.
  #   - DATABASE_URL: Connection string for the Postgres database.
  #   - REDIS_URL: Connection string for the Redis instance.
  #   - BLOCKCHAIN_RPC: RPC endpoint for the Ganache blockchain.
  #   - JWT_SECRET: Secret key for JWT authentication.
  #   - PORT: Port on which the backend server listens.
  #
  # Restart Policy:
  #   - Restarts the container unless it is explicitly stopped.
  #
  # Healthcheck:
  #   - Periodically checks the /health endpoint to ensure the service is running.
  #   - Interval: 30 seconds
  #   - Timeout: 5 seconds
  #   - Retries: 3
  #   - Start period: 10 seconds
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - PQC_SIGNATURE_VERIFY=false
    ports:
      - "3001:3000"
    depends_on:
      - postgres
      - redis
      - ganache
    networks:
      - frontend-network
      - backend-network
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/zkvote_dev
      - REDIS_URL=redis://redis:6379
      - BLOCKCHAIN_RPC=http://ganache:8545
      - JWT_SECRET=dev_jwt_secret
      - PORT=3000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Service: postgres
  # -----------------
  # This service runs a Postgres database using the official postgres:15-alpine image.
  #
  # Ports:
  #   - Exposes port 5432 inside the container and maps it to port 5432 on the host.
  #
  # Volumes:
  #   - Persists database data in the postgres-data volume.
  #   - Initializes the database using the init-db.sql script.
  #
  # Networks:
  #   - Connects to backend-network for communication with other services.
  #
  # Environment Variables:
  #   - POSTGRES_USER: Username for the database (default: postgres).
  #   - POSTGRES_PASSWORD: Password for the database (default: postgres).
  #   - POSTGRES_DB: Name of the database (default: zkvote_dev).
  #
  # Restart Policy:
  #   - Restarts the container unless it is explicitly stopped.
  #
  # Healthcheck:
  #   - Periodically checks database readiness using pg_isready.
  #   - Interval: 10 seconds
  #   - Timeout: 5 seconds
  #   - Retries: 3
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - backend-network
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=zkvote_dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Service: redis
  # --------------
  # This service runs a Redis instance using the official redis:7-alpine image.
  #
  # Ports:
  #   - Exposes port 6379 inside the container and maps it to port 6379 on the host.
  #
  # Networks:
  #   - Connects to backend-network for communication with other services.
  #
  # Restart Policy:
  #   - Restarts the container unless it is explicitly stopped.
  #
  # Healthcheck:
  #   - Periodically checks Redis availability using redis-cli ping.
  #   - Interval: 10 seconds
  #   - Timeout: 5 seconds
  #   - Retries: 3
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Service: ganache
  # ----------------
  # This service runs a local Ethereum blockchain using Ganache, built from the Dockerfile in ./contracts.
  #
  # Ports:
  #   - Exposes port 8545 inside the container and maps it to port 8545 on the host.
  #
  # Volumes:
  #   - Persists blockchain data in the ganache-data volume.
  #
  # Networks:
  #   - Connects to backend-network for communication with other services.
  #
  # Command:
  #   - Starts the blockchain node using npx hardhat node.
  #
  # Restart Policy:
  #   - Restarts the container unless it is explicitly stopped.
  #
  # Healthcheck:
  #   - Periodically checks the RPC endpoint to ensure the service is running.
  #   - Interval: 10 seconds
  #   - Timeout: 5 seconds
  #   - Retries: 5
  ganache:
    build:
      context: ./contracts
      dockerfile: Dockerfile
    ports:
      - "8545:8545"
    volumes:
      - ganache-data:/app/.ganache
    networks:
      - backend-network
    command: npx hardhat node
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8545"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service: polygon-node
  # ---------------------
  # This service runs a Polygon-compatible Ethereum node using the official ethereum/client-go image.
  #
  # Ports:
  #   - Exposes port 8545 inside the container and maps it to port 8546 on the host.
  #
  # Volumes:
  #   - Persists blockchain data in the polygon-data volume.
  #
  # Networks:
  #   - Connects to backend-network for communication with other services.
  #
  # Command:
  #   - Starts the node in development mode with HTTP RPC enabled.
  #
  # Restart Policy:
  #   - Restarts the container unless it is explicitly stopped.
  polygon-node:
    image: ethereum/client-go:latest
    ports:
      - "8546:8545"
    volumes:
      - polygon-data:/root/.ethereum
    networks:
      - backend-network
    command: --dev --http --http.addr 0.0.0.0 --http.api eth,net,web3,debug
    restart: unless-stopped

  # Service: arbitrum-node
  # ----------------------
  # This service runs an Arbitrum Nitro node using the official offchainlabs/nitro-node image.
  #
  # Ports:
  #   - Exposes port 8545 inside the container and maps it to port 8547 on the host.
  #
  # Volumes:
  #   - Persists blockchain data in the arbitrum-data volume.
  #
  # Networks:
  #   - Connects to backend-network for communication with other services.
  #
  # Command:
  #   - Starts the node in development mode with HTTP API enabled.
  #
  # Restart Policy:
  #   - Restarts the container unless it is explicitly stopped.
  arbitrum-node:
    image: offchainlabs/nitro-node:latest
    ports:
      - "8547:8545"
    volumes:
      - arbitrum-data:/root/.arbitrum
    networks:
      - backend-network
    command: --dev-mode --http.api eth,net,web3,debug
    restart: unless-stopped

# -------------------------------------------------------------------
# networks:
#   frontend-network:  # Isolated network for frontend services to communicate securely.
#   backend-network:   # Isolated network for backend services, databases, and internal APIs.
#
# volumes:
#   postgres-data:     # Persistent storage for PostgreSQL database data.
#   redis-data:        # Persistent storage for Redis in-memory data.
#   ganache-data:      # Persistent storage for Ganache blockchain data.
#   polygon-data:      # Persistent storage for Polygon blockchain node data.
#   arbitrum-data:     # Persistent storage for Arbitrum blockchain node data.
# -------------------------------------------------------------------
networks:
  frontend-network:
  backend-network:

volumes:
  postgres-data:
  redis-data:
  ganache-data:
  polygon-data:
  arbitrum-data:
